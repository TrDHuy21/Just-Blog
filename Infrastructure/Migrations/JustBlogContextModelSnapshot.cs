// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(JustBlogContext))]
    partial class JustBlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Social",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "hello",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Programming",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "hello",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Comment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Great post!",
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5518),
                            Date = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5514),
                            PostId = 1,
                            UpdatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5520)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Very informative.",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5526),
                            Date = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5523),
                            PostId = 2,
                            UpdatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5528)
                        });
                });

            modelBuilder.Entity("Domain.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "This is the content of the first post.",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5292),
                            IsPublished = true,
                            Summary = "Summary of the first post",
                            Title = "First Post",
                            UpdatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5319),
                            Views = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "This is the content of the second post.",
                            CreatedBy = 2,
                            CreatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5326),
                            IsPublished = true,
                            Summary = "Summary of the second post",
                            Title = "Second Post",
                            UpdatedDate = new DateTime(2025, 3, 31, 23, 15, 16, 293, DateTimeKind.Local).AddTicks(5327),
                            Views = 150
                        });
                });

            modelBuilder.Entity("Domain.Entity.PostRate", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Point")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostRate", null, t =>
                        {
                            t.HasCheckConstraint("CK_PostRate_Point", "Point >= 0 AND Point <= 5");
                        });

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            UserId = 1,
                            Point = 4.5m
                        },
                        new
                        {
                            PostId = 2,
                            UserId = 2,
                            Point = 3.8m
                        });
                });

            modelBuilder.Entity("Domain.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Contributor"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Tag", b =>
                {
                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("TagName", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            TagName = "Introduction",
                            PostId = 1
                        },
                        new
                        {
                            TagName = "Getting Started",
                            PostId = 1
                        },
                        new
                        {
                            TagName = "Advanced",
                            PostId = 2
                        },
                        new
                        {
                            TagName = "Tips and Tricks",
                            PostId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Nguyen Van Admin",
                            Password = "admin",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Nguyen Van Contributor",
                            Password = "contributor",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "contributor"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.HasOne("Domain.Entity.User", "CreatedByUser")
                        .WithMany("CreatedCategories")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entity.User", "UpdatedByUser")
                        .WithMany("UpdatedCategories")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entity.Comment", b =>
                {
                    b.HasOne("Domain.Entity.User", "CreatedByUser")
                        .WithMany("CreatedComments")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entity.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "UpdatedByUser")
                        .WithMany("UpdatedComments")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Post");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entity.Post", b =>
                {
                    b.HasOne("Domain.Entity.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "CreatedByUser")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entity.User", "UpdatedByUser")
                        .WithMany("UpdatedPosts")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entity.PostRate", b =>
                {
                    b.HasOne("Domain.Entity.Post", "Post")
                        .WithMany("PostRates")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "User")
                        .WithMany("PostRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.Tag", b =>
                {
                    b.HasOne("Domain.Entity.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.HasOne("Domain.Entity.User", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Entity.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostRates");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Navigation("CreatedCategories");

                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedPosts");

                    b.Navigation("CreatedUsers");

                    b.Navigation("PostRates");

                    b.Navigation("UpdatedCategories");

                    b.Navigation("UpdatedComments");

                    b.Navigation("UpdatedPosts");

                    b.Navigation("UpdatedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
