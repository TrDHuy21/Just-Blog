

@using Application.Helper

@{

}

@model Application.Dto.PageDtos.PageResultDto<Application.Dto.PostDtos.IndexPostDto>
<div class="container px-4 px-lg-5">
	<div class="row gx-4 gx-lg-5 justify-content-center">
		<div class="col-md-12 col-lg-12 col-xl-12">
			@if (Model != null && Model.Items != null) 
			{
				foreach (var post in Model.Items)
				{
					<!-- Post preview-->
					<div class="post-preview">
						<a href="@Url.Action("Detail", "Post", new { id = post.Id })"><h2 class="post-title">@post.Title</h2></a>
						@Html.ActionLink(
											linkText: post.Title,
											actionName: "FindPost",
											controllerName: "Post",
											routeValues: new
											{
												year = post.CreatedDate.Year,
												month = post.CreatedDate.Month.ToString("00"),
												title = post.Title.RemoveDiacritics().Replace(" ", "-").ToLower(),
											},
											// add class for css
											htmlAttributes: new { @class = "post-title" }
											)
						<p class="post-meta">
							@Html.GenDate(post.CreatedDate, post.Views, post.Rate, post.Author?.FullName)
						</p>
						<p>
							@post.Summary
						</p>
					</div>
					<!-- Divider-->
					<hr class="my-4" />
				}

				// pagination navi
                <nav aria-label="Page navigation">
                    <ul class="pagination">
                        @* Previous button *@
                        <li class="page-item @(Model.Page <= 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.RouteUrl(null, new { controller = "Post", action = "IndexPostPage", index = Model.Page - 1 })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>

                        @{
                            const int maxPagesToShow = 5;
                            int startPage = Math.Max(1, Model.Page - (maxPagesToShow / 2));
                            int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);

                            // Adjust start page if we're near the end
                            if (endPage - startPage + 1 < maxPagesToShow && startPage > 1)
                            {
                                startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                            }

                            // First page link if not in range
                            if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/post/page/1">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            // Page numbers
                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.Page ? "active" : "")">
                                    <a class="page-link" href="/post/page/@i">@i</a>
                                </li>
                            }

                            // Last page link if not in range
                            if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" href="/post/page/@Model.TotalPages">@Model.TotalPages</a>
                                </li>
                            }
                        }

                        @* Next button *@
                        <li class="page-item @(Model.Page >= Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="/post/page/@(Model.Page + 1)" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
			}
		</div>
	</div>
</div>
